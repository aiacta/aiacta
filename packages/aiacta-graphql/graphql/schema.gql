type World {
  id: ID!
  name: String!
  players: [PlayerInWorld]
  messages: [Message]
  creator: PlayerInWorld
}

interface PlayerInfo {
  id: ID!
  name: String!
  color: String!
}

type PlayerInWorld implements PlayerInfo {
  id: ID!
  name: String!
  color: String!
  role: Role!
}

type Player implements PlayerInfo {
  id: ID!
  name: String!
  color: String!
  worlds: [World]
}

type Message {
  id: ID!
  component: String
  text: String
}

input MessageInput {
  component: String
  text: String
}

input WorldInput {
  name: String
  inviteOnly: Boolean
  password: String
}

type Query {
  worlds: [World]
  world(id: ID!): World
  invitesToWorlds: [World]
}

type Mutation {
  sendMessage(worldId: ID!, input: MessageInput!): Message
  createWorld(input: WorldInput!): World
  joinWorld(worldId: ID!, password: String, joinKey: String): World
}

type Subscription {
  newMessages(worldId: ID!): [Message]!
}
